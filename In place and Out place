//SAKET SHUBHAM
//21102109 CIVIL
         
// 1st
The space complexity of a "In-Place" sorting 
algorithm falls between O(1) and O(logn), 
both included.
An in-place algorithm, as the name implies,
 is one that transforms the input "in-place"
 and generates the output in the same memory
 that stores the data.
A "Out-Place" sorting algorithm, on the other
 hand, has a space complexity greater than O.
 (logn).


// 2nd

//Insertion Sort Using In-Place Algorithm
#include <iostream>
using namespace std;
//Creating Insertion Sort void function
void insertion_sort_IP(int arr[],int n){
    //Initialising variables i and j
    int i=0,j=i+1;
    while(j<=n-1){
        int temp=arr[j];
        while(i>=0){
            if(arr[i]>temp){
                arr[i+1]=arr[i];
                i--;
            }
            if(i==-1){arr[0]=temp;break;}
            if(arr[i]<=temp){arr[i+1]=temp;break;}
        }
        j++;
        i=j-1;
    }
    return;
}

//Insertion Sort Using Out-Place Algorithm
void insertion_sort_OP(int arr[],int si,int ei){
    //si=starting index
    //ei=ending index
    if(si==ei){return;}
    int j=si+1;
    int temp=arr[j];
    while(si>=0){
        if(arr[si]>temp){
            arr[si+1]=arr[si];
            si--;
        }
        if(si==-1){arr[0]=temp;break;}
        if(arr[si]<=temp){arr[si+1]=temp;break;}
    }
    insertion_sort_OP(arr,si+1,ei);
}
//Function to print array
void pfun(int arr[],int n){
    for(int i=0;i<n;i++){cout<<arr[i]<<" ";}
}
int main(){
    int n;
    //Taking Input array
    cout<<"ENTER NUMBER OF ELEMENTS IN THE ARRAY: ";
    cin>>n;
    int arr[n],arr2[n];//Two array with same size and elements
    cout<<"ENTER ELEMENTS OF ARRAY SEPERATED BY SPACE: ";
    for(int i=0;i<n;i++){cin>>arr[i];}
    //copying arr to arr2
    for(int i=0;i<n;i++){arr2[i]=arr[i];}
    cout<<endl;
    cout<<"ARRAY BEFORE SORTING : ";pfun(arr,n);
    //Calling insertion sort using in-place algorithm.
    insertion_sort_IP(arr,n);
    cout<<endl;
    cout<<"ARRAY AFTER SORTING USING IN-PLACE ALGORITHM : ";
    //printing the array
    pfun(arr,n);
    cout<<endl;
    //calling insertiong sort using out-place algorithm.
    insertion_sort_OP(arr2,0,n-1);
    cout<<"ARRAY AFTER SORTING USING OUT-PLACE ALGORITHM : ";
    //printing the array
    pfun(arr,n);
    cout<<endl;

}

// 

3rd

While applying in-place techniques to an
 algorithm is challenging, applying
 out-of-place techniques is simple, but does 
raise the space complexity of the algorithm.
If we want to reverse an array, for example,
 the in-place algorithm will swap the first 
and last elements until we reach the middle 
of the array. If we want to solve the same 
problem using the out-place algorithm,
 however, we must create an additional 
array of the same size and copy the elements
 of the original array from the back to the
 front of the new array. This algorithm 
increases the space complexity to O(n) 
because we have created an additional array.


Bubble sort, Selection sort, Insertion sort, and Heapsort all use the IN-PLACE algorithm.
Merge sort uses the NOT IN-PLACE method since it takes up O(n) more space.

*/
